import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.edu.imd.edb.application.Compressor object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.io.IOException : (execution(* br.edu.imd.edb.application.Compressor..*+.*(..) throws java.io.IOException) ||
    execution(br.edu.imd.edb.application.Compressor..*+.new(..) throws java.io.IOException) ||
execution(* br.edu.imd.edb.application.Compressor+.*(..) throws java.io.IOException) ||
    execution(br.edu.imd.edb.application.Compressor+.new(..) throws java.io.IOException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.io.IOException) {
      throw (java.io.IOException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.edu.imd.edb.application.Compressor object$rac): (execution( * br.edu.imd.edb.application.Compressor..*+.*(..))
          || execution(br.edu.imd.edb.application.Compressor..*+.new(..))
          || execution( * br.edu.imd.edb.application.Compressor+.*(..))
          || execution(br.edu.imd.edb.application.Compressor+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.edu.imd.edb.application.Compressor..*+.*(..))
          || execution(br.edu.imd.edb.application.Compressor..*+.new(..))
          || execution( * br.edu.imd.edb.application.Compressor+.*(..))
          || execution(br.edu.imd.edb.application.Compressor+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.edu.imd.edb.application.Extractor object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.io.IOException : (execution(* br.edu.imd.edb.application.Extractor..*+.*(..) throws java.io.IOException) ||
    execution(br.edu.imd.edb.application.Extractor..*+.new(..) throws java.io.IOException) ||
execution(* br.edu.imd.edb.application.Extractor+.*(..) throws java.io.IOException) ||
    execution(br.edu.imd.edb.application.Extractor+.new(..) throws java.io.IOException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.io.IOException) {
      throw (java.io.IOException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.edu.imd.edb.application.Extractor object$rac): (execution( * br.edu.imd.edb.application.Extractor..*+.*(..))
          || execution(br.edu.imd.edb.application.Extractor..*+.new(..))
          || execution( * br.edu.imd.edb.application.Extractor+.*(..))
          || execution(br.edu.imd.edb.application.Extractor+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.edu.imd.edb.application.Extractor..*+.*(..))
          || execution(br.edu.imd.edb.application.Extractor..*+.new(..))
          || execution( * br.edu.imd.edb.application.Extractor+.*(..))
          || execution(br.edu.imd.edb.application.Extractor+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.edu.imd.edb.application.Main object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.io.IOException : (execution(* br.edu.imd.edb.application.Main..*+.*(..) throws java.io.IOException) ||
    execution(br.edu.imd.edb.application.Main..*+.new(..) throws java.io.IOException) ||
execution(* br.edu.imd.edb.application.Main+.*(..) throws java.io.IOException) ||
    execution(br.edu.imd.edb.application.Main+.new(..) throws java.io.IOException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.io.IOException) {
      throw (java.io.IOException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.edu.imd.edb.application.Main object$rac): (execution( * br.edu.imd.edb.application.Main..*+.*(..))
          || execution(br.edu.imd.edb.application.Main..*+.new(..))
          || execution( * br.edu.imd.edb.application.Main+.*(..))
          || execution(br.edu.imd.edb.application.Main+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.edu.imd.edb.application.Main..*+.*(..))
          || execution(br.edu.imd.edb.application.Main..*+.new(..))
          || execution( * br.edu.imd.edb.application.Main+.*(..))
          || execution(br.edu.imd.edb.application.Main+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.edu.imd.edb.entities.Char object$rac): (execution( * br.edu.imd.edb.entities.Char..*+.*(..))
          || execution(br.edu.imd.edb.entities.Char..*+.new(..))
          || execution( * br.edu.imd.edb.entities.Char+.*(..))
          || execution(br.edu.imd.edb.entities.Char+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.edu.imd.edb.entities.Char..*+.*(..))
          || execution(br.edu.imd.edb.entities.Char..*+.new(..))
          || execution( * br.edu.imd.edb.entities.Char+.*(..))
          || execution(br.edu.imd.edb.entities.Char+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.edu.imd.edb.heap.Heap object$rac): (execution( * br.edu.imd.edb.heap.Heap..*+.*(..))
          || execution(br.edu.imd.edb.heap.Heap..*+.new(..))
          || execution( * br.edu.imd.edb.heap.Heap+.*(..))
          || execution(br.edu.imd.edb.heap.Heap+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.edu.imd.edb.heap.Heap..*+.*(..))
          || execution(br.edu.imd.edb.heap.Heap..*+.new(..))
          || execution( * br.edu.imd.edb.heap.Heap+.*(..))
          || execution(br.edu.imd.edb.heap.Heap+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.edu.imd.edb.tree.Node object$rac): (execution( * br.edu.imd.edb.tree.Node..*+.*(..))
          || execution(br.edu.imd.edb.tree.Node..*+.new(..))
          || execution( * br.edu.imd.edb.tree.Node+.*(..))
          || execution(br.edu.imd.edb.tree.Node+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.edu.imd.edb.tree.Node..*+.*(..))
          || execution(br.edu.imd.edb.tree.Node..*+.new(..))
          || execution( * br.edu.imd.edb.tree.Node+.*(..))
          || execution(br.edu.imd.edb.tree.Node+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.edu.imd.edb.util.TBinary object$rac): (execution( * br.edu.imd.edb.util.TBinary..*+.*(..))
          || execution(br.edu.imd.edb.util.TBinary..*+.new(..))
          || execution( * br.edu.imd.edb.util.TBinary+.*(..))
          || execution(br.edu.imd.edb.util.TBinary+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.edu.imd.edb.util.TBinary..*+.*(..))
          || execution(br.edu.imd.edb.util.TBinary..*+.new(..))
          || execution( * br.edu.imd.edb.util.TBinary+.*(..))
          || execution(br.edu.imd.edb.util.TBinary+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}